From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qmuntal <qmuntaldiaz@microsoft.com>
Date: Tue, 19 Jul 2022 15:58:02 +0200
Subject: [PATCH] Add CNG crypto backend

---
 src/crypto/ecdsa/badlinkname.go               |  17 +
 src/crypto/internal/backend/backend_test.go   |   4 +-
 src/crypto/internal/backend/bbig/big_cng.go   |  12 +
 src/crypto/internal/backend/cng_windows.go    | 316 ++++++++++++++++++
 src/crypto/internal/backend/common.go         |   9 +-
 src/crypto/internal/backend/fips140/cng.go    |  33 ++
 src/crypto/rsa/pss_test.go                    |   2 +-
 src/go.mod                                    |   1 +
 src/go.sum                                    |   2 +
 src/go/build/deps_test.go                     |   5 +
 src/go/build/vendor_test.go                   |   1 +
 .../goexperiment/exp_cngcrypto_off.go         |   9 +
 src/internal/goexperiment/exp_cngcrypto_on.go |   9 +
 src/internal/goexperiment/flags.go            |   1 +
 14 files changed, 416 insertions(+), 5 deletions(-)
 create mode 100644 src/crypto/ecdsa/badlinkname.go
 create mode 100644 src/crypto/internal/backend/bbig/big_cng.go
 create mode 100644 src/crypto/internal/backend/cng_windows.go
 create mode 100644 src/crypto/internal/backend/fips140/cng.go
 create mode 100644 src/internal/goexperiment/exp_cngcrypto_off.go
 create mode 100644 src/internal/goexperiment/exp_cngcrypto_on.go

diff --git a/src/crypto/ecdsa/badlinkname.go b/src/crypto/ecdsa/badlinkname.go
new file mode 100644
index 00000000000000..0d00b7bb3a7fc8
--- /dev/null
+++ b/src/crypto/ecdsa/badlinkname.go
@@ -0,0 +1,17 @@
+// Copyright 2024 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package ecdsa
+
+import _ "unsafe"
+
+// The symbols below are pulled by the CNG backend in the Microsoft Go compiler.
+// We provide a push linkname here, to keep them accessible with pull linknames.
+
+//go:linkname encodeSignature
+//go:linkname parseSignature
+
+// This supplements other linknames that are already added by
+// https://github.com/golang/go/commit/41aab30bd260297ad8ddad47e98fdf8390a9a67e
+// See that commit for more information.
diff --git a/src/crypto/internal/backend/backend_test.go b/src/crypto/internal/backend/backend_test.go
index c2c06d3bff8c74..837cff477e257e 100644
--- a/src/crypto/internal/backend/backend_test.go
+++ b/src/crypto/internal/backend/backend_test.go
@@ -4,9 +4,7 @@
 
 package backend
 
-import (
-	"testing"
-)
+import "testing"
 
 // Test that Unreachable panics.
 func TestUnreachable(t *testing.T) {
diff --git a/src/crypto/internal/backend/bbig/big_cng.go b/src/crypto/internal/backend/bbig/big_cng.go
new file mode 100644
index 00000000000000..92623031fd87d0
--- /dev/null
+++ b/src/crypto/internal/backend/bbig/big_cng.go
@@ -0,0 +1,12 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.cngcrypto
+
+package bbig
+
+import "github.com/microsoft/go-crypto-winnative/cng/bbig"
+
+var Enc = bbig.Enc
+var Dec = bbig.Dec
diff --git a/src/crypto/internal/backend/cng_windows.go b/src/crypto/internal/backend/cng_windows.go
new file mode 100644
index 00000000000000..8b5416f5be0955
--- /dev/null
+++ b/src/crypto/internal/backend/cng_windows.go
@@ -0,0 +1,316 @@
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.cngcrypto && windows
+
+// Package cng provides access to CNGCrypto implementation functions.
+// Check the variable Enabled to find out whether CNGCrypto is available.
+// If CNGCrypto is not available, the functions in this package all panic.
+package backend
+
+import (
+	"crypto"
+	"crypto/cipher"
+	"crypto/internal/backend/fips140"
+	"crypto/internal/boring/sig"
+	"hash"
+	_ "unsafe"
+
+	"github.com/microsoft/go-crypto-winnative/cng"
+)
+
+// Enabled controls whether FIPS crypto is enabled.
+const Enabled = true
+
+type BigInt = cng.BigInt
+
+func init() {
+	if fips140.Enabled() {
+		enabled, err := cng.FIPS()
+		if err != nil {
+			panic("cngcrypto: unknown FIPS mode: " + err.Error())
+		}
+		if !enabled {
+			panic("cngcrypto: not in FIPS mode")
+		}
+	}
+	sig.BoringCrypto()
+}
+
+const RandReader = cng.RandReader
+
+func SupportsHash(h crypto.Hash) bool {
+	return cng.SupportsHash(h)
+}
+
+func NewMD5() hash.Hash    { return cng.NewMD5() }
+func NewSHA1() hash.Hash   { return cng.NewSHA1() }
+func NewSHA224() hash.Hash { panic("cngcrypto: not available") }
+func NewSHA256() hash.Hash { return cng.NewSHA256() }
+func NewSHA384() hash.Hash { return cng.NewSHA384() }
+func NewSHA512() hash.Hash { return cng.NewSHA512() }
+
+func MD5(p []byte) (sum [16]byte)    { return cng.MD5(p) }
+func SHA1(p []byte) (sum [20]byte)   { return cng.SHA1(p) }
+func SHA224(p []byte) (sum [28]byte) { panic("cngcrypto: not available") }
+func SHA256(p []byte) (sum [32]byte) { return cng.SHA256(p) }
+func SHA384(p []byte) (sum [48]byte) { return cng.SHA384(p) }
+func SHA512(p []byte) (sum [64]byte) { return cng.SHA512(p) }
+
+func NewHMAC(h func() hash.Hash, key []byte) hash.Hash {
+	return cng.NewHMAC(h, key)
+}
+
+func NewAESCipher(key []byte) (cipher.Block, error) {
+	return cng.NewAESCipher(key)
+}
+
+func NewGCMTLS(c cipher.Block) (cipher.AEAD, error) {
+	return cng.NewGCMTLS(c)
+}
+
+func NewGCMTLS13(c cipher.Block) (cipher.AEAD, error) {
+	return cng.NewGCMTLS13(c)
+}
+
+type PublicKeyECDSA = cng.PublicKeyECDSA
+type PrivateKeyECDSA = cng.PrivateKeyECDSA
+
+func GenerateKeyECDSA(curve string) (X, Y, D cng.BigInt, err error) {
+	return cng.GenerateKeyECDSA(curve)
+}
+
+func NewPrivateKeyECDSA(curve string, X, Y, D cng.BigInt) (*cng.PrivateKeyECDSA, error) {
+	return cng.NewPrivateKeyECDSA(curve, X, Y, D)
+}
+
+func NewPublicKeyECDSA(curve string, X, Y cng.BigInt) (*cng.PublicKeyECDSA, error) {
+	return cng.NewPublicKeyECDSA(curve, X, Y)
+}
+
+//go:linkname encodeSignature crypto/ecdsa.encodeSignature
+func encodeSignature(r, s []byte) ([]byte, error)
+
+//go:linkname parseSignature crypto/ecdsa.parseSignature
+func parseSignature(sig []byte) (r, s []byte, err error)
+
+func SignMarshalECDSA(priv *cng.PrivateKeyECDSA, hash []byte) ([]byte, error) {
+	r, s, err := cng.SignECDSA(priv, hash)
+	if err != nil {
+		return nil, err
+	}
+	return encodeSignature(r, s)
+}
+
+func VerifyECDSA(pub *cng.PublicKeyECDSA, hash []byte, sig []byte) bool {
+	rBytes, sBytes, err := parseSignature(sig)
+	if err != nil {
+		return false
+	}
+	return cng.VerifyECDSA(pub, hash, cng.BigInt(rBytes), cng.BigInt(sBytes))
+}
+
+func SignECDSA(priv *cng.PrivateKeyECDSA, hash []byte) (r, s cng.BigInt, err error) {
+	return cng.SignECDSA(priv, hash)
+}
+
+func VerifyECDSARaw(pub *cng.PublicKeyECDSA, hash []byte, r, s cng.BigInt) bool {
+	return cng.VerifyECDSA(pub, hash, r, s)
+}
+
+type PublicKeyRSA = cng.PublicKeyRSA
+type PrivateKeyRSA = cng.PrivateKeyRSA
+
+func DecryptRSAOAEP(h, mgfHash hash.Hash, priv *cng.PrivateKeyRSA, ciphertext, label []byte) ([]byte, error) {
+	return cng.DecryptRSAOAEP(h, priv, ciphertext, label)
+}
+
+func DecryptRSAPKCS1(priv *cng.PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	return cng.DecryptRSAPKCS1(priv, ciphertext)
+}
+
+func DecryptRSANoPadding(priv *cng.PrivateKeyRSA, ciphertext []byte) ([]byte, error) {
+	return cng.DecryptRSANoPadding(priv, ciphertext)
+}
+
+func EncryptRSAOAEP(h, mgfHash hash.Hash, pub *cng.PublicKeyRSA, msg, label []byte) ([]byte, error) {
+	return cng.EncryptRSAOAEP(h, pub, msg, label)
+}
+
+func EncryptRSAPKCS1(pub *cng.PublicKeyRSA, msg []byte) ([]byte, error) {
+	return cng.EncryptRSAPKCS1(pub, msg)
+}
+
+func EncryptRSANoPadding(pub *cng.PublicKeyRSA, msg []byte) ([]byte, error) {
+	return cng.EncryptRSANoPadding(pub, msg)
+}
+
+func GenerateKeyRSA(bits int) (N, E, D, P, Q, Dp, Dq, Qinv cng.BigInt, err error) {
+	return cng.GenerateKeyRSA(bits)
+}
+
+func NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv cng.BigInt) (*cng.PrivateKeyRSA, error) {
+	return cng.NewPrivateKeyRSA(N, E, D, P, Q, Dp, Dq, Qinv)
+}
+
+func NewPublicKeyRSA(N, E cng.BigInt) (*cng.PublicKeyRSA, error) {
+	return cng.NewPublicKeyRSA(N, E)
+}
+
+func SignRSAPKCS1v15(priv *cng.PrivateKeyRSA, h crypto.Hash, hashed []byte) ([]byte, error) {
+	return cng.SignRSAPKCS1v15(priv, h, hashed)
+}
+
+func SignRSAPSS(priv *cng.PrivateKeyRSA, h crypto.Hash, hashed []byte, saltLen int) ([]byte, error) {
+	return cng.SignRSAPSS(priv, h, hashed, saltLen)
+}
+
+func VerifyRSAPKCS1v15(pub *cng.PublicKeyRSA, h crypto.Hash, hashed, sig []byte) error {
+	return cng.VerifyRSAPKCS1v15(pub, h, hashed, sig)
+}
+
+func VerifyRSAPSS(pub *cng.PublicKeyRSA, h crypto.Hash, hashed, sig []byte, saltLen int) error {
+	return cng.VerifyRSAPSS(pub, h, hashed, sig, saltLen)
+}
+
+type PrivateKeyECDH = cng.PrivateKeyECDH
+type PublicKeyECDH = cng.PublicKeyECDH
+
+func ECDH(priv *cng.PrivateKeyECDH, pub *cng.PublicKeyECDH) ([]byte, error) {
+	return cng.ECDH(priv, pub)
+}
+
+func GenerateKeyECDH(curve string) (*cng.PrivateKeyECDH, []byte, error) {
+	return cng.GenerateKeyECDH(curve)
+}
+
+func NewPrivateKeyECDH(curve string, bytes []byte) (*cng.PrivateKeyECDH, error) {
+	return cng.NewPrivateKeyECDH(curve, bytes)
+}
+
+func NewPublicKeyECDH(curve string, bytes []byte) (*cng.PublicKeyECDH, error) {
+	return cng.NewPublicKeyECDH(curve, bytes)
+}
+
+func SupportsHKDF() bool {
+	return cng.SupportsHKDF()
+}
+
+func ExpandHKDF(h func() hash.Hash, pseudorandomKey, info []byte, keyLength int) ([]byte, error) {
+	return cng.ExpandHKDF(h, pseudorandomKey, info, keyLength)
+}
+
+func ExtractHKDF(h func() hash.Hash, secret, salt []byte) ([]byte, error) {
+	return cng.ExtractHKDF(h, secret, salt)
+}
+
+func SupportsPBKDF2() bool { return true }
+
+func PBKDF2(password, salt []byte, iter, keyLen int, h func() hash.Hash) ([]byte, error) {
+	return cng.PBKDF2(password, salt, iter, keyLen, h)
+}
+
+func SupportsTLS1PRF() bool {
+	return true
+}
+
+func TLS1PRF(result, secret, label, seed []byte, h func() hash.Hash) error {
+	return cng.TLS1PRF(result, secret, label, seed, h)
+}
+
+func SupportsDESCipher() bool {
+	return true
+}
+
+func SupportsTripleDESCipher() bool {
+	return true
+}
+
+func NewDESCipher(key []byte) (cipher.Block, error) {
+	return cng.NewDESCipher(key)
+}
+
+func NewTripleDESCipher(key []byte) (cipher.Block, error) {
+	return cng.NewTripleDESCipher(key)
+}
+
+func SupportsRC4() bool { return true }
+
+type RC4Cipher = cng.RC4Cipher
+
+func NewRC4Cipher(key []byte) (*RC4Cipher, error) { return cng.NewRC4Cipher(key) }
+
+func SupportsEd25519() bool { return false }
+
+type PublicKeyEd25519 struct{}
+
+func (k PublicKeyEd25519) Bytes() ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+type PrivateKeyEd25519 struct{}
+
+func (k PrivateKeyEd25519) Bytes() ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func GenerateKeyEd25519() (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPrivateKeyEd25119(priv []byte) (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPublicKeyEd25119(pub []byte) (*PublicKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func NewPrivateKeyEd25519FromSeed(seed []byte) (*PrivateKeyEd25519, error) {
+	panic("cryptobackend: not available")
+}
+
+func SignEd25519(priv *PrivateKeyEd25519, message []byte) ([]byte, error) {
+	panic("cryptobackend: not available")
+}
+
+func VerifyEd25519(pub *PublicKeyEd25519, message, sig []byte) error {
+	panic("cryptobackend: not available")
+}
+
+type PrivateKeyDSA = cng.PrivateKeyDSA
+type PublicKeyDSA = cng.PublicKeyDSA
+
+func SupportsDSA(l, n int) bool {
+	// These are the only N values supported by CNG
+	return n == 160 || n == 256
+}
+
+func GenerateParametersDSA(l, n int) (p, q, g cng.BigInt, err error) {
+	params, err := cng.GenerateParametersDSA(l)
+	if err != nil {
+		return nil, nil, nil, err
+	}
+	return params.P, params.Q, params.G, nil
+}
+
+func GenerateKeyDSA(p, q, g cng.BigInt) (x, y cng.BigInt, err error) {
+	return cng.GenerateKeyDSA(cng.DSAParameters{P: p, Q: q, G: g})
+}
+
+func NewPrivateKeyDSA(p, q, g, x, y cng.BigInt) (*cng.PrivateKeyDSA, error) {
+	return cng.NewPrivateKeyDSA(cng.DSAParameters{P: p, Q: q, G: g}, x, y)
+}
+
+func NewPublicKeyDSA(p, q, g, y cng.BigInt) (*cng.PublicKeyDSA, error) {
+	return cng.NewPublicKeyDSA(cng.DSAParameters{P: p, Q: q, G: g}, y)
+}
+
+func SignDSA(priv *PrivateKeyDSA, hash []byte, parseSignature func([]byte) (cng.BigInt, cng.BigInt, error)) (r, s cng.BigInt, err error) {
+	return cng.SignDSA(priv, hash)
+}
+
+func VerifyDSA(pub *PublicKeyDSA, hashed []byte, r, s cng.BigInt, encodeSignature func(r, s cng.BigInt) ([]byte, error)) bool {
+	return cng.VerifyDSA(pub, hashed, r, s)
+}
diff --git a/src/crypto/internal/backend/common.go b/src/crypto/internal/backend/common.go
index 858e76e3c51c06..91223c0ef0f810 100644
--- a/src/crypto/internal/backend/common.go
+++ b/src/crypto/internal/backend/common.go
@@ -44,7 +44,11 @@ func hasSuffix(s, t string) bool {
 // UnreachableExceptTests marks code that should be unreachable
 // when backend is in use. It panics.
 func UnreachableExceptTests() {
-	if Enabled {
+	// runtime_arg0 is not supported on windows.
+	// We are going through the same code patch on linux,
+	// so if we are unintentionally calling an 'unreachable' function,
+	// we will catch it there.
+	if Enabled && !goexperiment.CNGCrypto {
 		name := runtime_arg0()
 		// If ran on Windows we'd need to allow _test.exe and .test.exe as well.
 		if !hasSuffix(name, "_test") && !hasSuffix(name, ".test") {
@@ -68,5 +72,8 @@ func IsRSAKeySupported(primes int) bool {
 }
 
 func IsSaltSupported(salt int) bool {
+	if goexperiment.CNGCrypto {
+		return salt != 0 // rsa.PSSSaltLengthAuto
+	}
 	return true
 }
diff --git a/src/crypto/internal/backend/fips140/cng.go b/src/crypto/internal/backend/fips140/cng.go
new file mode 100644
index 00000000000000..f769d15f94ab05
--- /dev/null
+++ b/src/crypto/internal/backend/fips140/cng.go
@@ -0,0 +1,33 @@
+// Copyright 2024 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build goexperiment.cngcrypto
+
+package fips140
+
+import (
+	"internal/syscall/windows/sysdll"
+	"syscall"
+	"unsafe"
+)
+
+// Don't use github.com/microsoft/go-crypto-winnative here.
+// The fips140 package should have minimal dependencies.
+// Also, don't directly query the system FIPS mode from the registry,
+// there are some no-longer documented legacy entries that can enable FIPS mode,
+// and BCryptGetFipsAlgorithmMode supports them all.
+var (
+	bcrypt = syscall.MustLoadDLL(sysdll.Add("bcrypt.dll"))
+
+	bcryptGetFipsAlgorithmMode = bcrypt.MustFindProc("BCryptGetFipsAlgorithmMode")
+)
+
+func systemFIPSMode() bool {
+	var enabled uint32
+	ret, _, _ := bcryptGetFipsAlgorithmMode.Call(uintptr(unsafe.Pointer(&enabled)))
+	if ret != 0 {
+		return false
+	}
+	return enabled != 0
+}
diff --git a/src/crypto/rsa/pss_test.go b/src/crypto/rsa/pss_test.go
index a4af0a2144870a..7d7115cff81cea 100644
--- a/src/crypto/rsa/pss_test.go
+++ b/src/crypto/rsa/pss_test.go
@@ -246,7 +246,7 @@ func fromHex(hexStr string) []byte {
 
 func TestInvalidPSSSaltLength(t *testing.T) {
 	t.Setenv("GODEBUG", "rsa1024min=0")
-	key, err := GenerateKey(rand.Reader, 245)
+	key, err := GenerateKey(rand.Reader, 512)
 	if err != nil {
 		t.Fatal(err)
 	}
diff --git a/src/go.mod b/src/go.mod
index 186ced4a1123a8..e9da0eb1301b93 100644
--- a/src/go.mod
+++ b/src/go.mod
@@ -4,6 +4,7 @@ go 1.24
 
 require (
 	github.com/golang-fips/openssl/v2 v2.0.4-0.20241211125030-65f2a3ae34cf
+	github.com/microsoft/go-crypto-winnative v0.0.0-20241212090637-6d419040e383
 	golang.org/x/crypto v0.30.0
 	golang.org/x/net v0.32.1-0.20241206180132-552d8ac903a1
 )
diff --git a/src/go.sum b/src/go.sum
index 0a58eccb57a869..b464f023942b74 100644
--- a/src/go.sum
+++ b/src/go.sum
@@ -1,5 +1,7 @@
 github.com/golang-fips/openssl/v2 v2.0.4-0.20241211125030-65f2a3ae34cf h1:gkjE7LMxjlaSn8fdvbT/HJrpGcW/ZnwYpps7sSBhLD4=
 github.com/golang-fips/openssl/v2 v2.0.4-0.20241211125030-65f2a3ae34cf/go.mod h1:OYUBsoxLpFu8OFyhZHxfpN8lgcsw8JhTC3BQK7+XUc0=
+github.com/microsoft/go-crypto-winnative v0.0.0-20241212090637-6d419040e383 h1:fMAxrMWT19/kkIZIuB9cjqW8SqRxCH2+2ZiZr5qrpuI=
+github.com/microsoft/go-crypto-winnative v0.0.0-20241212090637-6d419040e383/go.mod h1:JkxQeL8dGcyCuKjn1Etz4NmQrOMImMy4BA9hptEfVFA=
 golang.org/x/crypto v0.30.0 h1:RwoQn3GkWiMkzlX562cLB7OxWvjH1L8xutO2WoJcRoY=
 golang.org/x/crypto v0.30.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=
 golang.org/x/net v0.32.1-0.20241206180132-552d8ac903a1 h1:+Yk1FZ5E+/ewA0nOO/HRYs9E4yeqpGOShuSAdzCNNoQ=
diff --git a/src/go/build/deps_test.go b/src/go/build/deps_test.go
index 37cb128ba9409a..3ceabaebc7ea46 100644
--- a/src/go/build/deps_test.go
+++ b/src/go/build/deps_test.go
@@ -518,6 +518,10 @@ var depsRules = `
 	crypto/cipher,
 	crypto/internal/boring/bcache,
 	crypto/internal/backend/fips140
+	< github.com/microsoft/go-crypto-winnative/internal/subtle
+	< github.com/microsoft/go-crypto-winnative/internal/sysdll
+	< github.com/microsoft/go-crypto-winnative/internal/bcrypt
+	< github.com/microsoft/go-crypto-winnative/cng
 	< github.com/golang-fips/openssl/v2/internal/subtle
 	< github.com/golang-fips/openssl/v2
 	< crypto/internal/boring
@@ -552,6 +556,7 @@ var depsRules = `
 
 	# CRYPTO-MATH is core bignum-based crypto - no cgo, net; fmt now ok.
 	CRYPTO, FMT, math/big
+	< github.com/microsoft/go-crypto-winnative/cng/bbig
 	< github.com/golang-fips/openssl/v2/bbig
 	< crypto/internal/boring/bbig
 	< crypto/internal/backend/bbig
diff --git a/src/go/build/vendor_test.go b/src/go/build/vendor_test.go
index 7c821ae4bc5727..1d0b9b20e9b1d4 100644
--- a/src/go/build/vendor_test.go
+++ b/src/go/build/vendor_test.go
@@ -23,6 +23,7 @@ var allowedPackagePrefixes = []string{
 	"github.com/ianlancetaylor/demangle",
 	"rsc.io/markdown",
 	"github.com/golang-fips/openssl",
+	"github.com/microsoft/go-crypto-winnative",
 }
 
 // Verify that the vendor directories contain only packages matching the list above.
diff --git a/src/internal/goexperiment/exp_cngcrypto_off.go b/src/internal/goexperiment/exp_cngcrypto_off.go
new file mode 100644
index 00000000000000..831460053281e2
--- /dev/null
+++ b/src/internal/goexperiment/exp_cngcrypto_off.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build !goexperiment.cngcrypto
+// +build !goexperiment.cngcrypto
+
+package goexperiment
+
+const CNGCrypto = false
+const CNGCryptoInt = 0
diff --git a/src/internal/goexperiment/exp_cngcrypto_on.go b/src/internal/goexperiment/exp_cngcrypto_on.go
new file mode 100644
index 00000000000000..99ee2542ca38a9
--- /dev/null
+++ b/src/internal/goexperiment/exp_cngcrypto_on.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build goexperiment.cngcrypto
+// +build goexperiment.cngcrypto
+
+package goexperiment
+
+const CNGCrypto = true
+const CNGCryptoInt = 1
diff --git a/src/internal/goexperiment/flags.go b/src/internal/goexperiment/flags.go
index d56306bf10a356..c6f64c18bdd13f 100644
--- a/src/internal/goexperiment/flags.go
+++ b/src/internal/goexperiment/flags.go
@@ -60,6 +60,7 @@ type Flags struct {
 	StaticLockRanking bool
 	BoringCrypto      bool
 	OpenSSLCrypto     bool
+	CNGCrypto         bool
 
 	// SystemCrypto enables the OpenSSL, CNG or Darwin crypto experiment depending on
 	// which one is appropriate on the target GOOS.
